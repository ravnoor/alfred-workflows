#!/usr/bin/env ruby

require 'json'
require 'pathname'

# Helpers
def get_env(env_variable:, default:, make_pathname: false)
  if env_variable.nil? || env_variable.empty?
    return make_pathname ? Pathname.new(default).expand_path : default
  end

  make_pathname ? Pathname.new(env_variable).expand_path : env_variable
end

# Constants
order = ARGV[0] # modified, modified_reverse, added, added_reverse
abort 'You need to specify an order type.' if ARGV[0].empty?

Cache_dir = Pathname(ENV['alfred_workflow_cache'])

Downloads_dir = get_env(
  env_variable: ENV['Downloads_dir'],
  default: Pathname.new(ENV['HOME']).join('Downloads').to_path,
  make_pathname: true
)

All_entries =
  Downloads_dir
  .children
  .reject { |p| p.basename.to_path.start_with?('.') }

script_filter_items = []

entries =
  if order =~ /modified.*/
    All_entries.sort_by(&:mtime)
  elsif order =~ /added.*/
    entries_cache_file = Cache_dir.join('added_cache.txt')

    entries_date_old = entries_cache_file.mtime.to_i rescue 0
    entries_date_new = Downloads_dir.mtime.to_i

    if entries_date_old != entries_date_new
      require 'open3'

      entries_by_added =
        Open3
        .capture2(
          'mdls',
          '-name', 'kMDItemFSName',
          '-name', 'kMDItemDateAdded',
          '-raw',
          *All_entries.map(&:to_path)
        )
        .first
        .split("\0")
        .each_slice(2)
        .sort
        .map { |p| Downloads_dir.join(p[1]) }

      # Prevent saving a cache file
      # when there are incomplete files (downloads in progress)
      if entries_by_added.none? { |p| p.basename == '(null)' }
        Cache_dir.mkpath
        entries_cache_file.write(entries_by_added.join("\n"))
        entries_cache_file.utime(entries_date_new, entries_date_new)
      end

      entries_by_added
    else
      entries_cache_file.read.split("\n").map { |p| Pathname(p) }
    end
  else
    abort 'Unrecognised order type.'
  end

entries.reverse! if order =~ /.+_reverse/

entries.each do |entry|
  name =
    if entry.directory?
      entry.basename.to_path
    else
      entry.basename(entry.extname).to_path
    end

  script_filter_items.push(
    type: 'file',
    title: name,
    subtitle: entry,
    icon: { path: entry, type: 'fileicon' },
    arg: entry
  )
end

puts({ items: script_filter_items }.to_json)
