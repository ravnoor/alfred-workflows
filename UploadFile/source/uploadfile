#!/bin/bash

readonly progress_file='/tmp/uploadfile_progress'
readonly name_file='/tmp/uploadfile_name' # for `ufp` (in Alfred)

function notification {
  ./Notificator.app/Contents/Resources/Scripts/notificator --message "${1}" --title "${alfred_workflow_name}"
}

function ascii_basename {
  basename "${1}" | sed -e 's/[^a-zA-Z0-9._-]/-/g'
}

function is_string_in_array {
  local string="${1}"

  for value in "${@:2}"; do
    [[ "${string}" == "${value}" ]] && return 0
  done
  return 1
}

function transfer {
  local tmp_zip_dir given_file tmp_dir dir_name zip_file file_path file_name hosts default_host upload_host

  # Consolidate files bit
  # If acting on multiple files, first copy them to a directory
  if [[ "${#}" -gt 1 ]]; then
    readonly tmp_zip_dir="$(mktemp -d)/archive"
    mkdir "${tmp_zip_dir}"
    cp -R "${@}" "${tmp_zip_dir}"
    readonly given_file="${tmp_zip_dir}"
  else
    readonly given_file="${1}"
  fi

  # Make zip if acting on a directory
  if [[ -d "${given_file}" ]]; then
    readonly tmp_dir="$(mktemp -d)"
    readonly dir_name="$(ascii_basename "${given_file}")"
    readonly zip_file="${tmp_dir}/${dir_name}.zip"
    DITTONORSRC=1 ditto -ck "${given_file}" "${zip_file}"
    readonly file_path="${zip_file}"
  else
    readonly file_path="${given_file}"
  fi

  # Escape quotes, so we can quote curl's "--form"
  # to allow for filenames with commas and semicolons
  readonly escaped_file_path="${file_path//\"/\\\"}"

  # Uploading bit
  readonly file_name=$(ascii_basename "${file_path}")
  echo -n "${file_name}" > "${name_file}"
  notification "Uploading “${file_name}”"

  readonly hosts=('0x0.st' 'transfer.sh' 'alpha.transfer.sh' 'bayfiles.com' 'anonfile.com' 'megaupload.is' 'forumfiles.com')
  readonly default_host="${hosts[0]}"

  if [[ -n "${upload_file_to}" ]]; then
    if is_string_in_array "${upload_file_to}" "${hosts[@]}"; then
      readonly upload_host="${upload_file_to}"
    else
      echo "Invalid upload host: ${upload_file_to}" >&2
      exit 1
    fi
  else
    readonly upload_host="${default_host}"
  fi

  if [[ "${upload_host}" =~ ^(alpha\.)?transfer\.sh$ ]]; then
    curl --globoff --progress-bar --upload-file "${file_path}" "https://${upload_host}/${file_name}" 2> "${progress_file}" | tr -d '\n' | pbcopy
  elif [[ "${upload_host}" == '0x0.st' ]]; then
    curl --globoff --progress-bar --form "file=@\"${escaped_file_path}\"" "https://${upload_host}" 2> "${progress_file}" | tr -d '\n' | pbcopy
  else
    curl --globoff --progress-bar --form "file=@\"${escaped_file_path}\"" "https://api.${upload_host}/upload" 2> "${progress_file}" | ruby -r 'json' -e 'data = JSON.parse(gets); abort "There was an error uploading" if data["status"] == false; puts data["data"]["file"]["url"]["full"]' | tr -d '\n' | pbcopy
  fi

  # Play sound and show message
  afplay /System/Library/Sounds/Ping.aiff
  notification "Uploaded “${file_name}”"
}

function kill_transfer {
  local parent_process oldest_child_process

  # Kill parent to prevent notification showing success and child to stop upload
  readonly parent_process="$(pgrep -f 'uploadfile upload')"
  readonly oldest_child_process="$(pgrep -oP "${parent_process}")"
  kill "${parent_process}" "${oldest_child_process}"

  # Play sound and show message
  afplay /System/Library/Sounds/Funk.aiff
  notification 'Upload canceled'
}

if [[ "${1}" == 'upload' ]]; then
  shift
  transfer "${@}"
elif [[ "${1}" == 'abort' ]]; then
  kill_transfer
else
  echo 'A wrong option was given.'
  exit 1
fi

# Delete temporary files
rm "${progress_file}" "${name_file}"
