<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.vitorgalvao.alfred.playaddress</string>
	<key>connections</key>
	<dict>
		<key>197D2E43-384A-44B1-BE86-B36582E4CE52</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3F2114BA-DAA7-4DF6-BD3D-DAFD6E7439F0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>2C17F6E1-CA91-4D8D-B014-91010DFDCD35</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>359734FE-C703-415A-9038-E76AF0A25AAA</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Download video to watch later</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>8FE08360-28F3-4F26-8523-75D368B83282</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>3238CA6D-80AE-4CD7-B09C-6297766F4936</key>
		<array/>
		<key>359734FE-C703-415A-9038-E76AF0A25AAA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3238CA6D-80AE-4CD7-B09C-6297766F4936</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8FE08360-28F3-4F26-8523-75D368B83282</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3238CA6D-80AE-4CD7-B09C-6297766F4936</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>197D2E43-384A-44B1-BE86-B36582E4CE52</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Play the URL in the frontmost browser or clipboard</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>PlayAddress</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>if ! osascript -e "tell application id \"com.runningwithcrayons.Alfred\" to run trigger \"download_video\" in workflow \"com.vitorgalvao.alfred.downmedia\" with argument \"${1}\""; then
  if osascript -e "display dialog \"The DownMedia Workflow is required to download videos.\" with title \"DownMedia is missing\" with icon POSIX file \"${PWD}/icon.png\" buttons { \"Cancel\", \"Download DownMedia\" } default button \"Download DownMedia\""; then
    open 'https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/DownMedia/DownMedia.alfredworkflow'
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>359734FE-C703-415A-9038-E76AF0A25AAA</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>playadd</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Grabbing URL…</string>
				<key>script</key>
				<string>const frontmost_app_name = Application('System Events').applicationProcesses.where({ frontmost: true }).name()[0]
const frontmost_app = Application(frontmost_app_name)

const chromium_variants = ['Google Chrome', 'Chromium', 'Opera', 'Vivaldi', 'Brave Browser', 'Microsoft Edge']
const webkit_variants = ['Safari', 'Webkit']

let title, url, clipboard
let script_filter_items = []

// Get details from frontmost browser, if any
if (chromium_variants.some(app_name =&gt; frontmost_app_name.startsWith(app_name))) {
  title = frontmost_app.windows[0].activeTab.name()
  url = frontmost_app.windows[0].activeTab.url()

  if (title.length === 0) title = 'Web page does not have a title'

  script_filter_items.push({ 'variables': { 'browser': frontmost_app_name, 'url': url }, 'title': title, 'subtitle': url })
} else if (webkit_variants.some(app_name =&gt; frontmost_app_name.startsWith(app_name))) {
  title = frontmost_app.documents[0].name()
  url = frontmost_app.documents[0].url()

  if (title.length === 0) title = 'Web page does not have a title'

  script_filter_items.push({ 'variables': { 'browser': frontmost_app_name, 'url': url }, 'title': title, 'subtitle': url })
}

// Get details from clipboard
frontmost_app.includeStandardAdditions = true

clipboard = (() =&gt; {
  try {
    return frontmost_app.theClipboard()
  } catch(error) {
    console.log('Ignoring clipboard contents due to error ' + error.errorNumber + '.')
  }
})()

if (RegExp('^https?://').test(clipboard)) {
  title = 'Play clipboard URL'
  url = clipboard

  script_filter_items.push({ 'variables': { 'browser': false, 'url': url }, 'title': title, 'subtitle': url })
}

if (script_filter_items.length === 0) {
  JSON.stringify({
    'items': [{
	  'title': 'No URL found',
      'subtitle': 'Did not find a URL in the clipboard or a supported browser as the frontmost app',
      'valid': false
    }]
  })
} else {
  JSON.stringify({ 'items': script_filter_items })
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Play the URL in the frontmost browser or clipboard</string>
				<key>title</key>
				<string>PlayAddress</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>2C17F6E1-CA91-4D8D-B014-91010DFDCD35</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>ObjC.import('stdlib')
const browser_name = $.getenv('browser')
const browser = Application(browser_name)
const url = $.getenv('url')
const close_browser = ($.getenv('close_tab') === 'true') ? true : false

const chromium_variants = ['Google Chrome', 'Chromium', 'Opera', 'Vivaldi', 'Brave Browser', 'Microsoft Edge']
const webkit_variants = ['Safari', 'Webkit']

if (close_browser &amp;&amp; browser_name &amp;&amp; $.system('/usr/local/bin/youtube-dl --simulate --quiet ' + url) === 0) {
  if (chromium_variants.some(app_name =&gt; browser_name.startsWith(app_name))) {
    browser.windows[0].tabs().forEach(tab =&gt; { if (tab.url() === url) tab.close() })
  } else if (webkit_variants.some(app_name =&gt; browser_name.startsWith(app_name))) {
    let current_tab_index = 0
    let last_tab_index = browser.windows[0].tabs.length - 1

    while (current_tab_index &lt;= last_tab_index) {
      let tab = browser.windows[0].tabs[current_tab_index]

      if (tab.url() === url) {
        tab.close()
        last_tab_index--
      } else {
        current_tab_index++
      }
    }
  }
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>3238CA6D-80AE-4CD7-B09C-6297766F4936</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>pbcopy &lt;&lt;&lt; "${url}" # Save URL to clipboard history

if [[ "$(mdfind kMDItemCFBundleIdentifier = io.mpv)" ]]; then
  PATH="$(./_sharedresources 'youtubedl')"
  video_player='mpv'
elif [[ "$(mdfind kMDItemCFBundleIdentifier = com.colliderli.iina)" ]]; then
  video_player='iina'
elif [[ "$(mdfind kMDItemCFBundleIdentifier = org.videolan.vlc)" ]]; then
  video_player='vlc'
else
  warning 'To play a stream you need mpv, iina, or vlc.'
fi

open -na "${video_player}" --args "${url}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>197D2E43-384A-44B1-BE86-B36582E4CE52</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/source/info.plist"
readonly workflow_url="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/${alfred_workflow_name}.alfredworkflow"
readonly download_type='direct'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local -r notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  local -r terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>3F2114BA-DAA7-4DF6-BD3D-DAFD6E7439F0</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>type</key>
			<string>alfred.workflow.utility.junction</string>
			<key>uid</key>
			<string>8FE08360-28F3-4F26-8523-75D368B83282</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Run `playadd` and available options will appear to play the URL in the frontmost browser tab or your clipboard.

![](https://i.imgur.com/rAWiidy.png)

Pick one of them and the URL will play. ⌘↵ downloads the video (requires [DownVid](https://github.com/vitorgalvao/alfred-workflows/tree/master/DownVid); adds to [WatchList](https://github.com/vitorgalvao/alfred-workflows/tree/master/WatchList) if available).

If the `close_tab` Workflow Environment Variable is `true` and the URL is supported, the browser tabs with the matching URL will close.

To play a stream you need [mpv](http://mpv.io/), [IINA](https://lhc70000.github.io/iina/), or [VLC](http://www.videolan.org/vlc/index.html).</string>
	<key>uidata</key>
	<dict>
		<key>197D2E43-384A-44B1-BE86-B36582E4CE52</key>
		<dict>
			<key>note</key>
			<string>Play video</string>
			<key>xpos</key>
			<integer>460</integer>
			<key>ypos</key>
			<integer>200</integer>
		</dict>
		<key>2C17F6E1-CA91-4D8D-B014-91010DFDCD35</key>
		<dict>
			<key>xpos</key>
			<integer>35</integer>
			<key>ypos</key>
			<integer>25</integer>
		</dict>
		<key>3238CA6D-80AE-4CD7-B09C-6297766F4936</key>
		<dict>
			<key>note</key>
			<string>Close browser tab</string>
			<key>xpos</key>
			<integer>460</integer>
			<key>ypos</key>
			<integer>25</integer>
		</dict>
		<key>359734FE-C703-415A-9038-E76AF0A25AAA</key>
		<dict>
			<key>note</key>
			<string>Download video</string>
			<key>xpos</key>
			<integer>255</integer>
			<key>ypos</key>
			<integer>25</integer>
		</dict>
		<key>3F2114BA-DAA7-4DF6-BD3D-DAFD6E7439F0</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>665</integer>
			<key>ypos</key>
			<integer>200</integer>
		</dict>
		<key>8FE08360-28F3-4F26-8523-75D368B83282</key>
		<dict>
			<key>xpos</key>
			<integer>295</integer>
			<key>ypos</key>
			<integer>230</integer>
		</dict>
	</dict>
	<key>variables</key>
	<dict>
		<key>close_tab</key>
		<string>true</string>
	</dict>
	<key>version</key>
	<string>20.5</string>
	<key>webaddress</key>
	<string>http://vitorgalvao.com/</string>
</dict>
</plist>
